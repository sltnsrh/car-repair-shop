version: '3.8'

services:
  keycloak-db:
    image: postgres:latest
    container_name: keycloak-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: keycloakDb
    volumes:
      - key-cloak_keycloak_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - repair-shop_network

  kc:
    image: quay.io/keycloak/keycloak:21.0.1
    container_name: keycloak
    command:
      - start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_SCHEMA: public
      KC_DB_URL_DATABASE: ${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KEYCLOAK_HOSTNAME: localhost
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8083:8080"
    volumes:
      - key-cloak_keycloak_data:/var/lib/postgresql/data
    depends_on:
      - keycloak-db
    networks:
      - repair-shop_network

  eureka-server:
    image: srhsltn/eureka-server
    container_name: eureka-server
    environment:
      eureka.instance.hostname: eureka-server
      eureka.client.register-with-eureka: false
      eureka.client.fetch-registry: false
    ports:
      - "8761:8761"
    networks:
      - repair-shop_network

  api-gateway:
    build: ../api-gateway
    container_name: api-gateway
    restart: always
    ports:
      - "8000:8000"
    environment:
      server.port: 8000
      eureka.client.service-url.defaultZone: http://eureka-server:8761/eureka/
    depends_on:
      - kc
      - eureka-server
    networks:
      - repair-shop_network

  car-db:
    image: mongo:4.0-xenial
    container_name: car-service-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - databases:/mongodb/car-db
    networks:
      - repair-shop_network

  order-db:
    image: mongo:4.0-xenial
    container_name: order-service-mongodb
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - databases:/mongodb/order-db
    networks:
      - repair-shop_network


  mongo-express:
    image: mongo-express
    container_name: mongo-ui
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@car-service-mongodb:27017/
    depends_on:
      - car-db
    networks:
      - repair-shop_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - zookeeper-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - zookeeper-network
    volumes:
      - kafka-vol:/kafka/data

networks:
  zookeeper-network:
  repair-shop_network:
    driver: bridge

volumes:
  kafka-vol:
  databases:
  key-cloak_keycloak_data:
    external: false
